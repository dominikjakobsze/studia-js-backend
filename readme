Opis:
Jest to backend wykonany na potrzeby projektu "Planer Nocnego Nieba", zawiera on wszystkie potrzebne naszym zdaniem
endpointy, posiada funkcjonalności wymagane w "specyfikacji" projektu oraz dodatkowe, które uznaliśmy za potrzebne.
Dodatkowo dołączony został docker-compose.yaml, który zawiera bazę danych MySQL. Baza danych jest skonfigurowana, jeśli jednak
istnieje potrzeba połączenia jej z np: tableplus, należy skorzystać z następujących danych:

- login: db_dev_studia_js_backend
- hasło: db_dev_studia_js_backend
- nazwa bazy danych: db_dev_studia_js_backend
- host: localhost:2400 / 127.0.0.1:2400

Poniżej wyszczególnione zostały endpointy, biblioteki, wszystkie kody statusu, które zwracamy
oraz technologie użyte w projekcie.

./index.js => główny plik, który zawiera konfigurację serwera, wszystkie routy oraz seeder tabeli bazy danych dostępny pod
/seed oraz konfigurację folderu, w którym znajdują się uploadowane pliki.

./uploads => folder, w którym znajdują się uploadowane pliki

./routes => folder, w którym znajdują się wszystkie routy

./db.js => plik, w którym znajduje się konfiguracja bazy danych

./seeder.js => plik, w którym znajduje się (kwerendy) seeder tabeli, bazy danych


Komendy:

npm start => włączenie serwera
docker compose up --build -d => włączenie bazy danych z pliku docker-compose.yaml (wymagany docker!)


Stack:

Backend w node.js i express.js
Relacyjna baza danych MySQL


Biblioteki:

multer - do obsługi plików i form-data
mysql2 - do obsługi relacyjnej bazy danych


API ENDPOINTS:

Status Codes that I use and their meaning:
400 - bad request => problem with user data ec. (validation)
404 - not found => resource not found
500 - internal server error => server error, processing
200 - ok => success


stars:
- POST /stars; expect: form-data => name, article, image
- GET /stars; expect: query => page (optional)
- GET /stars/:id; expect: params => id
- DELETE /stars/:id; expect: params => id
- PATCH /stars/:id; expect: params => id, form-data => name, article, image, shine, turned, constellationId, file (all optional)

constellations:
- POST /constellations; expect: form-data => name, article, image
- GET /constellations; expect: query => page (optional)
- GET /constellations/:id; expect: params => id
- DELETE /constellations/:id; expect: params => id
- PATCH /constellations/:id; expect: params => id, form-data => name, article, image, shine, turned, constellationId, file (all optional)